package inverse_triangle;

import Basic_operation.Method;

//??????-??????????? ???????? ????????? ??????????????? ???????
public class invTriangle {
    //??????-?????????? ???????

    /**
     * ????? ??????? ???????????? ??????????????? ???????
     * @param A ?????? ???????? ???????
     * @return ??????????? ???????
     */
    public static double[][] invTriangle(double[][] A) {
        int n = A.length;
        double[][] res = new double[n][n];
        double[][] a = new double[n / 2][n / 2];
        double[][] b = new double[n / 2][n / 2];
        double[][] c = new double[n / 2][n / 2];
        double[][] x = new double[n / 2][n / 2];
        double[][] y = new double[n / 2][n / 2];
        double[][] z = new double[n / 2][n / 2];
        if (n == 2) {
            res[0][0] = 1.0 / A[0][0];
            res[1][1] = 1.0 / A[1][1];
            res[0][1] = 0.0;
            res[1][0] = res[1][1] * (-1) * A[1][0] * res[0][0];
        } else {
            a = part(A, 0, 0);
            b = part(A, 1, 1);
            c = part(A, 1, 0);
            x = invTriangle(a);
            y = invTriangle(b);
            z = Method.mult(y, c);
            z = Method.mult(z, x);
            z = Method.mult(z, -1);
            res = gather(x, y, z);
        }
        return res;
    }

    //????????? ????? ???????
    /**
     * ????? ??? ???????? ????? ? ???????
     * @param A - ????????? ??????? ? ???? ????????? ????
     * @param x - ?????????
     * @param y - ?????????
     * @return ??????? ???????
     */
    public static double[][] part(double[][] A, int x, int y) {
        double[][] subMatrix = new double[A.length / 2][A.length / 2];//????????? ?????????? ? ???????? ????? ??? ??????
        if (x == 0) {
            for (int i = 0; i < subMatrix.length; i++)//????? ?? ??????? ???????
                System.arraycopy(A[i], 0, subMatrix[i], 0, subMatrix[i].length);//???????? ?????? ??????? ??????? ? ???? ???????
        } else {
            if (x == 1 && y == 0) {
                for (int i = 0, j = A.length / 2; i < subMatrix.length; i++, j++)
                    System.arraycopy(A[j], 0, subMatrix[i], 0, subMatrix[i].length);
            } else {
                if (x == 1 && y == 1) {
                    for (int i = 0, j = A.length / 2; i < subMatrix.length; i++, j++)
                        System.arraycopy(A[j], A.length / 2, subMatrix[i], 0, subMatrix[i].length);
                }
            }
        }
        return subMatrix;
    }

    //???????? ??????????????? ??????? ? ????? ??????
    public static double[][] gather(double[][] x, double[][] y, double[][] z) {
        double[][] res = new double[x.length * 2][x.length * 2];
        //?????? ?????????? ???????? ??????-????????
        //?????? ?????????? ???????? ??????? ???????-???????.
        //?????? ???????? ? ??????-??????????.
        //????????? ???????? ???????? ????????? ?????????? ???????? ???????.
        //????????? ???????? ??? ?????????? ?????????, ??????? ????? ???????????.
        for (int i = 0; i < x.length; i++) {
            System.arraycopy(x[i], 0, res[i], 0, x[i].length);
        }
        for (int i = 0, j = res.length / 2; i < y.length; j++, i++) {
            System.arraycopy(y[i], 0, res[j], res.length / 2, y[i].length);
        }
        for (int i = 0, j = res.length / 2; i < z.length; i++, j++) {
            System.arraycopy(z[i], 0, res[j], 0, z[i].length);
        }
        for (int i = 0; i < res.length / 2; i++) {
            for (int j = res.length / 2; j < res.length; j++) {
                res[i][j] = 0.0;
            }
        }
        return res;
    }

}
